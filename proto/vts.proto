syntax = "proto3";
package proto;

option go_package = "github.com/veraison/services/proto";


import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "attestation_format.proto";
import "appraisal_context.proto";
import "token.proto";


message Status {
    bool result = 1;
    string error_detail = 2;
}

message Evidence {
    google.protobuf.Struct value = 1;
}

message AddSwComponentsRequest {
    repeated Endorsement sw_components = 1;
}

message AddSwComponentsResponse {
    Status status = 1;
}

enum EndorsementType {
    UNSET = 0;
    REFERENCE_VALUE = 1;
    VERIFICATION_KEY = 2;
}

message Endorsement {
    AttestationFormat scheme = 1;
    EndorsementType type = 2;
    google.protobuf.Struct attributes = 3;
}

message AddTrustAnchorRequest {
    Endorsement trust_anchor = 1;
}

message AddTrustAnchorResponse {
    Status status = 1;
}

message MediaTypeList {
    repeated string media_types = 1;
}

// Client interface for the Veraison Trusted Services component.
service VTS {
    // Returns attestation information -- evidences, endorsed claims, trust
    // vector, etc -- for the provided attestation token data.
    rpc GetAttestation(AttestationToken) returns (AppraisalContext);
    rpc GetSupportedVerificationMediaTypes(google.protobuf.Empty) returns (MediaTypeList);

    // Service endpoints that are used to store Software Components
    // and Trust Anchors to the endorsement store
    rpc AddSwComponents(AddSwComponentsRequest) returns (AddSwComponentsResponse);
    rpc AddTrustAnchor(AddTrustAnchorRequest) returns (AddTrustAnchorResponse);
    // TODO When we move the provisiong plugins under VTS we need to enable this
    // TODO interface too.
    // rpc GetSupportedProvisioningMediaTypes(google.protobuf.Empty) returns (MediaTypeList);
}

